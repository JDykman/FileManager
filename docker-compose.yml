# docker-compose.yml

services:
  postgres-db:
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # ADDED: Healthcheck to ensure the DB is ready before services connect
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  vector-db:
    image: semitechnologies/weaviate:1.25.4
    restart: always
    environment:
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      DEFAULT_VECTORIZER_MODULE: "none"
      # IMPORTANT: Set to "false" and configure API keys for real production
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
    volumes:
      - weaviate-data:/var/lib/weaviate

  api:
    # CHANGED: Consistent build context for all services
    build:
      context: .
      dockerfile: ./services/api/Dockerfile
    restart: always
    depends_on:
      postgres-db:
        condition: service_healthy
      vector-db:
        condition: service_started # Weaviate doesn't have a simple healthcheck command
    environment:
      - DB_HOST=postgres-db
      - WEAVIATE_HOST=vector-db
      # Add other env vars from .env file here

  embedder:
    build:
      context: .
      dockerfile: ./services/embedder/Dockerfile
    restart: always
    depends_on:
      vector-db:
        condition: service_started
    # Add other env vars from .env file here

  indexer:
    build:
      context: .
      dockerfile: ./services/indexer/Dockerfile
    restart: always
    depends_on:
      postgres-db:
        condition: service_healthy
    # Add other env vars from .env file here

volumes:
  postgres-data:
  weaviate-data: